datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

model LogAuditoria {
  id        Int      @id @default(autoincrement())
  acao      String
  createdAt DateTime @default(now())
  detalhes  String?

  rifaId Int  @unique
  rifa   Rifa @relation(fields: [rifaId], references: [id])
}

model Premio {
  id        Int     @id @default(autoincrement())
  nome      String
  descricao String
  imagem    String?

  rifaId        Int?                 @unique
  rifa          Rifa?                @relation(fields: [rifaId], references: [id])
  participantes PremioParticipante[]
}

model Rifa {
  id                 Int        @id @default(autoincrement())
  titulo             String
  descricao          String
  precoBilhete       Float
  quantidadeBilhetes Int
  dataSorteio        DateTime?
  status             StatusRifa @default(Ativa)
  createdAt          DateTime   @default(now())

  organizadorId Int
  organizador   Organizador @relation(fields: [organizadorId], references: [id])

  sorteios Sorteio[]
  bilhetes Bilhete[]
  premio   Premio?
  logs     LogAuditoria[]
}

model Organizador {
  id   Int     @id @default(autoincrement())
  cnpj String? @unique

  userId  Int     @unique
  usuario Usuario @relation(fields: [userId], references: [id])

  rifas Rifa[]
}

model Participante {
  id Int @id @default(autoincrement())

  userId  Int     @unique
  usuario Usuario @relation(fields: [userId], references: [id])

  bilhetes   Bilhete[]
  pagamentos Pagamento[]
  premios    PremioParticipante[]
  vitorias   Sorteio[]            @relation("vencedor")
}

model Bilhete {
  id        Int       @id @default(autoincrement())
  numero    Int
  status    StatusBil @default(Disponivel)
  createdAt DateTime  @default(now())

  rifaId         Int
  rifa           Rifa          @relation(fields: [rifaId], references: [id])
  participanteId Int?
  participante   Participante? @relation(fields: [participanteId], references: [id])
  pagamento      Pagamento?

  sorteios SorteioBilhete[]
}

model Sorteio {
  id       Int      @id @default(autoincrement())
  dataHora DateTime @default(now())

  rifaId     Int
  rifa       Rifa          @relation(fields: [rifaId], references: [id])
  vencedorId Int?
  vencedor   Participante? @relation("vencedor", fields: [vencedorId], references: [id])

  bilhetes SorteioBilhete[]
}

model Notificacao {
  id        Int      @id @default(autoincrement())
  mensagem  String
  tipo      String
  status    String   @default("Pendente")
  dataEnvio DateTime @default(now())

  destinatarioId Int
  destinatario   Usuario @relation(fields: [destinatarioId], references: [id])
}

model Pagamento {
  id                Int       @id @default(autoincrement())
  valor             Float
  status            StatusPag @default(PENDENTE)
  metodo            MetodoPag
  dataProcessamento DateTime  @default(now())

  bilheteId      Int          @unique
  bilhete        Bilhete      @relation(fields: [bilheteId], references: [id])
  participanteId Int
  participante   Participante @relation(fields: [participanteId], references: [id])
}

model Usuario {
  id        Int       @id @default(autoincrement())
  nome      String
  email     String    @unique
  cpf       String    @unique
  senha     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  organizador  Organizador?
  participante Participante?

  notificacoes Notificacao[]
}

model PremioParticipante {
  premioId       Int
  participanteId Int
  dataPremiacao  DateTime @default(now())

  premio       Premio       @relation(fields: [premioId], references: [id])
  participante Participante @relation(fields: [participanteId], references: [id])

  @@id([premioId, participanteId])
}

model SorteioBilhete {
  sorteioId    Int
  bilheteId    Int
  dataInclusao DateTime @default(now())

  sorteio Sorteio @relation(fields: [sorteioId], references: [id])
  bilhete Bilhete @relation(fields: [bilheteId], references: [id])

  @@id([sorteioId, bilheteId])
}

enum StatusRifa {
  Ativa
  Finalizada
  Cancelada
}

enum StatusBil {
  Disponivel
  Vendido
  Premiado
}

enum StatusPag {
  PENDENTE
  APROVADO
  RECUSADO
}

enum MetodoPag {
  PIX
  CARTAO
  BOLETO
}
